@using BlazorWASM.Services.ClientInterfaces
@using Domain.DTOs
@inject ICommentService CommentService
@inject ISnackbar Snackbar 


<MudPaper Elevation="0" Class="pa-7">
    @if (_createCommentMode)
    {
        <AuthorizeView>
            <NotAuthorized>
                <MudText Align="Align.Center" Color="Color.Error" Typo="Typo.h6">You need to be logged in to add comments.</MudText>
            </NotAuthorized>
            <Authorized>
                <MudText Typo="Typo.h6">Create new comment here:</MudText>
                <MudTextField Variant="Variant.Filled" Label="Content "@bind-Value="_content" Lines="10"/>
                <MudDivider Class="ma-4"/>
                <MudButton Variant="Variant.Filled" OnClick="CreateComment">Create Comment</MudButton>
            </Authorized>
        </AuthorizeView>
    }
    else
    {
        <MudButton Color="Color.Tertiary" OnClick="@(() => _createCommentMode = true)">Create new Comment</MudButton>
    }
</MudPaper>

@code {
    private string _content = String.Empty;
    private bool _createCommentMode = false;

    [Parameter]
    public Action? CommentCreated { get; set; }

    [Parameter]
    public int? CommentedOn { get; set; }


    private async void CreateComment()
    {
        if (_content == String.Empty)
        {
            Snackbar.Add("Content cannot be empty!", Severity.Warning);
            return;
        }


        if (CommentedOn != null)
            await CommentService.CreateAsync(new CommentCreationRequestDto
            {
                CommentedOnId = CommentedOn.Value,
                Content = _content,
            });
        CommentCreated?.Invoke();
        Snackbar.Add("Comment added", Severity.Success);
        ResetInputs();
    }

    private void ResetInputs()
    {
        _createCommentMode = false;
        _content = "";
        StateHasChanged();
    }

}