@using BlazorWASM.Services.ClientImplementations
@using BlazorWASM.Services.ClientInterfaces
@using Domain.Models
@inject ICommentService CommentService



<MudStack Spacing="5">
    @if (PostId != null)
    {
        <AddCommentComponent CommentCreated="CommentCreated" CommentedOn="@PostId.Value"/>
    }
    @if (_comments.Count > 0)
    {
        @foreach (var comment in _comments)
        {
            <CommentComponent Comment="@comment"/>
        }
    }
    else
    {
        <MudText Typo="Typo.h6" Color="Color.Info" Class="ma-4" Align="Align.Center">No comments here. :(</MudText>
    }
</MudStack>


@code {

    [Parameter]
    public int? PostId {
        get { return _postId; }
        set
        {
            if (value != null) _postId = value.Value;
            Task.Run(RenderComments);
        }}

    private int _postId;

    private List<Comment> _comments = new();

    protected override async Task OnInitializedAsync()
    {
        await RenderComments();
    }

    private async void CommentCreated()
    {
        await RenderComments();
    }

    public async Task RenderComments()
    {
        if (PostId == null)
        {
            Console.WriteLine("Thats why");
            return;
        }
        
        var enumerable = await CommentService.GetByPostIdAsync(PostId.Value);
        _comments = enumerable.ToList();
        _comments.Sort((x, y) => DateTime.Compare(y.PublishedDateTime, x.PublishedDateTime));

        StateHasChanged();
    }

}